@page "/catalog"
@inject BasketService BasketService;
@using OnlineShop.Services.Basket
@using OnlineShop.Services.Catalog
@inject CatalogService CatalogService;
@inject AuthenticationStateProvider AuthenticationStateProvider;

@if (_getCatalogError)
{
    <h1>Ошибка при загрузке каталога</h1>
}
else
{
    <div class="section over-hide z-bigger">
        <div class="section over-hide z-bigger">
            <div class="container">
                <div class="row justify-content-center">
                    <div class="col-12 pt-5">
                        <p class="mb-4 pb-2">Категории</p>
                    </div>
                    <div class="col-12">
                        <input class="checkbox-tools" type="radio" @onclick="GetCatalog" name="tools" id="tool-5" checked>
                        <label class="for-checkbox-tools" for="tool-5">
                            <i class='uil uil-brush-alt'></i>
                            Все
                        </label>
                        <input class="checkbox-tools" type="radio" name="tools" @onclick='() => GetByCategory("Smart Phone")' id="tool-1">
                        <label class="for-checkbox-tools" for="tool-1">
                            <i class='uil uil-line-alt'></i>
                            Смартфоны
                        </label><!--
                        --><input class="checkbox-tools" type="radio" name="tools" @onclick='() => GetByCategory("Notebook")' id="tool-2">
                        <label class="for-checkbox-tools" for="tool-2">
                            <i class='uil uil-vector-square'></i>
                            Ноутбуки
                        </label><!--
                        --><input class="checkbox-tools" type="radio" name="tools" @onclick='() => GetByCategory("Computer")' id="tool-3">
                        <label class="for-checkbox-tools" for="tool-3">
                            <i class='uil uil-ruler'></i>
                            Компьютеры
                        </label><!--
                        --><input class="checkbox-tools" type="radio" name="tools" @onclick='() => GetByCategory("Other")' id="tool-4">
                        <label class="for-checkbox-tools" for="tool-4">
                            <i class='uil uil-crop-alt'></i>
                            Периферия
                        </label>
                    </div>
                </div>	
            </div>
        </div>
    </div>

    if (_catalog != null)
    {
        @foreach (var product in _catalog.Products!)
        {
            <div class="card">
                <div class="card__body">
                    <div class="half">
                        <div class="featured_text">
                            <h1>@product.Name</h1>
                            <p class="sub">@product.Category</p>
                            <p class="price">$@product.Price</p>
                        </div>
                        <div class="image">
                            <img src="@product.ImageFile" alt="">
                        </div>
                    </div>
                    <div class="half">
                        <div class="description">
                            <p>@product.Description</p>
                        </div>
                    </div>
                </div>
                <div class="card__footer">
                    <div class="recommend">
                        <p>@product.Summary</p>
                    </div>
                    <AuthorizeView>
                        <Authorized>
                            <div class="action">
                                <button type="button" @onclick="() => AddToBasketAsync(product)">Добавить в корзину</button>
                            </div>
                        </Authorized>
                    </AuthorizeView>
                </div>
            </div>
        }
    }
}

@code {
    private CatalogModel? _catalog;
    private bool _getCatalogError;
    private bool _shouldRender;

    protected override bool ShouldRender() => _shouldRender;

    protected override async Task OnInitializedAsync()
    {
        var catalog = await CatalogService.GetCatalogAsync();
        if (catalog?.Products == null)
        {
            _getCatalogError = true;
        }
        _catalog = catalog;
        _shouldRender = true;
    }

    private async Task GetCatalog()
    {
        var catalog = await CatalogService.GetCatalogAsync();
        if (catalog?.Products == null)
        {
            _getCatalogError = true;
        }
        _catalog = catalog;
        _shouldRender = true;
    }

    private async Task GetByCategory(string category)
    {
        _catalog = await CatalogService.GetProductsByCategoryAsync(category);
    }

    private async Task AddToBasketAsync(Product product)
    {
        var user = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (user.User.Identity is {IsAuthenticated: true })
        {
            var cartResult = await BasketService.GetBasketAsync(user.User.Identity.Name);
            if (cartResult == null)
            {
                return;
            }
            if (cartResult.Items!.Exists(c => c.ProductId == product.Id))
                cartResult.Items.FirstOrDefault(c => c.ProductId == product.Id)!.Quantity++;
            else
            {
                cartResult.Items!.Add(new ShoppingCartItem
                {
                    Price = product.Price,
                    Quantity = 1,
                    ProductId = product.Id,
                    ProductName = product.Name
                });
            }
            await BasketService.UpdateBasketAsync(cartResult);
        }
    }

}